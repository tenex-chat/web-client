/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as McpToolsRouteImport } from './routes/mcp-tools'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthSettingsRouteImport } from './routes/_auth/settings'
import { Route as AuthProjectsRouteImport } from './routes/_auth/projects'
import { Route as AuthAgentsRouteImport } from './routes/_auth/agents'
import { Route as AuthProjectsIndexRouteImport } from './routes/_auth/projects/index'
import { Route as AuthPPubkeyRouteImport } from './routes/_auth/p/$pubkey'
import { Route as AuthAgentsRequestsRouteImport } from './routes/_auth/agents/requests'
import { Route as AuthAgentsAgentIdRouteImport } from './routes/_auth/agents/$agentId'
import { Route as AuthProjectsProjectIdIndexRouteImport } from './routes/_auth/projects/$projectId/index'
import { Route as AuthProjectsProjectIdSettingsRouteImport } from './routes/_auth/projects/$projectId/settings'

const McpToolsRoute = McpToolsRouteImport.update({
  id: '/mcp-tools',
  path: '/mcp-tools',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSettingsRoute = AuthSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProjectsRoute = AuthProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAgentsRoute = AuthAgentsRouteImport.update({
  id: '/agents',
  path: '/agents',
  getParentRoute: () => AuthRoute,
} as any)
const AuthProjectsIndexRoute = AuthProjectsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthProjectsRoute,
} as any)
const AuthPPubkeyRoute = AuthPPubkeyRouteImport.update({
  id: '/p/$pubkey',
  path: '/p/$pubkey',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAgentsRequestsRoute = AuthAgentsRequestsRouteImport.update({
  id: '/requests',
  path: '/requests',
  getParentRoute: () => AuthAgentsRoute,
} as any)
const AuthAgentsAgentIdRoute = AuthAgentsAgentIdRouteImport.update({
  id: '/$agentId',
  path: '/$agentId',
  getParentRoute: () => AuthAgentsRoute,
} as any)
const AuthProjectsProjectIdIndexRoute =
  AuthProjectsProjectIdIndexRouteImport.update({
    id: '/$projectId/',
    path: '/$projectId/',
    getParentRoute: () => AuthProjectsRoute,
  } as any)
const AuthProjectsProjectIdSettingsRoute =
  AuthProjectsProjectIdSettingsRouteImport.update({
    id: '/$projectId/settings',
    path: '/$projectId/settings',
    getParentRoute: () => AuthProjectsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/mcp-tools': typeof McpToolsRoute
  '/agents': typeof AuthAgentsRouteWithChildren
  '/projects': typeof AuthProjectsRouteWithChildren
  '/settings': typeof AuthSettingsRoute
  '/agents/$agentId': typeof AuthAgentsAgentIdRoute
  '/agents/requests': typeof AuthAgentsRequestsRoute
  '/p/$pubkey': typeof AuthPPubkeyRoute
  '/projects/': typeof AuthProjectsIndexRoute
  '/projects/$projectId/settings': typeof AuthProjectsProjectIdSettingsRoute
  '/projects/$projectId': typeof AuthProjectsProjectIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/mcp-tools': typeof McpToolsRoute
  '/agents': typeof AuthAgentsRouteWithChildren
  '/settings': typeof AuthSettingsRoute
  '/agents/$agentId': typeof AuthAgentsAgentIdRoute
  '/agents/requests': typeof AuthAgentsRequestsRoute
  '/p/$pubkey': typeof AuthPPubkeyRoute
  '/projects': typeof AuthProjectsIndexRoute
  '/projects/$projectId/settings': typeof AuthProjectsProjectIdSettingsRoute
  '/projects/$projectId': typeof AuthProjectsProjectIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/mcp-tools': typeof McpToolsRoute
  '/_auth/agents': typeof AuthAgentsRouteWithChildren
  '/_auth/projects': typeof AuthProjectsRouteWithChildren
  '/_auth/settings': typeof AuthSettingsRoute
  '/_auth/agents/$agentId': typeof AuthAgentsAgentIdRoute
  '/_auth/agents/requests': typeof AuthAgentsRequestsRoute
  '/_auth/p/$pubkey': typeof AuthPPubkeyRoute
  '/_auth/projects/': typeof AuthProjectsIndexRoute
  '/_auth/projects/$projectId/settings': typeof AuthProjectsProjectIdSettingsRoute
  '/_auth/projects/$projectId/': typeof AuthProjectsProjectIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/mcp-tools'
    | '/agents'
    | '/projects'
    | '/settings'
    | '/agents/$agentId'
    | '/agents/requests'
    | '/p/$pubkey'
    | '/projects/'
    | '/projects/$projectId/settings'
    | '/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/mcp-tools'
    | '/agents'
    | '/settings'
    | '/agents/$agentId'
    | '/agents/requests'
    | '/p/$pubkey'
    | '/projects'
    | '/projects/$projectId/settings'
    | '/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/login'
    | '/mcp-tools'
    | '/_auth/agents'
    | '/_auth/projects'
    | '/_auth/settings'
    | '/_auth/agents/$agentId'
    | '/_auth/agents/requests'
    | '/_auth/p/$pubkey'
    | '/_auth/projects/'
    | '/_auth/projects/$projectId/settings'
    | '/_auth/projects/$projectId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  McpToolsRoute: typeof McpToolsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/mcp-tools': {
      id: '/mcp-tools'
      path: '/mcp-tools'
      fullPath: '/mcp-tools'
      preLoaderRoute: typeof McpToolsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/settings': {
      id: '/_auth/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthSettingsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/projects': {
      id: '/_auth/projects'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof AuthProjectsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/agents': {
      id: '/_auth/agents'
      path: '/agents'
      fullPath: '/agents'
      preLoaderRoute: typeof AuthAgentsRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/projects/': {
      id: '/_auth/projects/'
      path: '/'
      fullPath: '/projects/'
      preLoaderRoute: typeof AuthProjectsIndexRouteImport
      parentRoute: typeof AuthProjectsRoute
    }
    '/_auth/p/$pubkey': {
      id: '/_auth/p/$pubkey'
      path: '/p/$pubkey'
      fullPath: '/p/$pubkey'
      preLoaderRoute: typeof AuthPPubkeyRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/agents/requests': {
      id: '/_auth/agents/requests'
      path: '/requests'
      fullPath: '/agents/requests'
      preLoaderRoute: typeof AuthAgentsRequestsRouteImport
      parentRoute: typeof AuthAgentsRoute
    }
    '/_auth/agents/$agentId': {
      id: '/_auth/agents/$agentId'
      path: '/$agentId'
      fullPath: '/agents/$agentId'
      preLoaderRoute: typeof AuthAgentsAgentIdRouteImport
      parentRoute: typeof AuthAgentsRoute
    }
    '/_auth/projects/$projectId/': {
      id: '/_auth/projects/$projectId/'
      path: '/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof AuthProjectsProjectIdIndexRouteImport
      parentRoute: typeof AuthProjectsRoute
    }
    '/_auth/projects/$projectId/settings': {
      id: '/_auth/projects/$projectId/settings'
      path: '/$projectId/settings'
      fullPath: '/projects/$projectId/settings'
      preLoaderRoute: typeof AuthProjectsProjectIdSettingsRouteImport
      parentRoute: typeof AuthProjectsRoute
    }
  }
}

interface AuthAgentsRouteChildren {
  AuthAgentsAgentIdRoute: typeof AuthAgentsAgentIdRoute
  AuthAgentsRequestsRoute: typeof AuthAgentsRequestsRoute
}

const AuthAgentsRouteChildren: AuthAgentsRouteChildren = {
  AuthAgentsAgentIdRoute: AuthAgentsAgentIdRoute,
  AuthAgentsRequestsRoute: AuthAgentsRequestsRoute,
}

const AuthAgentsRouteWithChildren = AuthAgentsRoute._addFileChildren(
  AuthAgentsRouteChildren,
)

interface AuthProjectsRouteChildren {
  AuthProjectsIndexRoute: typeof AuthProjectsIndexRoute
  AuthProjectsProjectIdSettingsRoute: typeof AuthProjectsProjectIdSettingsRoute
  AuthProjectsProjectIdIndexRoute: typeof AuthProjectsProjectIdIndexRoute
}

const AuthProjectsRouteChildren: AuthProjectsRouteChildren = {
  AuthProjectsIndexRoute: AuthProjectsIndexRoute,
  AuthProjectsProjectIdSettingsRoute: AuthProjectsProjectIdSettingsRoute,
  AuthProjectsProjectIdIndexRoute: AuthProjectsProjectIdIndexRoute,
}

const AuthProjectsRouteWithChildren = AuthProjectsRoute._addFileChildren(
  AuthProjectsRouteChildren,
)

interface AuthRouteChildren {
  AuthAgentsRoute: typeof AuthAgentsRouteWithChildren
  AuthProjectsRoute: typeof AuthProjectsRouteWithChildren
  AuthSettingsRoute: typeof AuthSettingsRoute
  AuthPPubkeyRoute: typeof AuthPPubkeyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAgentsRoute: AuthAgentsRouteWithChildren,
  AuthProjectsRoute: AuthProjectsRouteWithChildren,
  AuthSettingsRoute: AuthSettingsRoute,
  AuthPPubkeyRoute: AuthPPubkeyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  McpToolsRoute: McpToolsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
